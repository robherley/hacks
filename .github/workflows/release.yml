name: Release

on:
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Release Assets
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: hacks-linux-amd64
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            name: hacks-linux-arm64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: hacks-macos-amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: hacks-macos-arm64
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation tools (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools gcc-aarch64-linux-gnu
    
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build binary
      env:
        CC_aarch64_unknown_linux_musl: aarch64-linux-gnu-gcc
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc
      run: |
        cargo build --release --target ${{ matrix.target }}
        
    - name: Prepare binary
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp target/${{ matrix.target }}/release/hacks.exe ${{ matrix.name }}.exe
        else
          cp target/${{ matrix.target }}/release/hacks ${{ matrix.name }}
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    
    - name: Generate checksums
      run: |
        sha256sum hacks-* > checksums.txt
        cat checksums.txt
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          hacks-*
          checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}